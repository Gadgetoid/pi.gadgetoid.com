// ulPaginate - Paginate unordered lists for condensing navigation items, great for scrollSpy fixed navs
//
// Version: 0.1 Alpha
//

(function(jQuery){

	var methods = {
		init : function( options )
		{
			options = jQuery.extend({
				pageSize: 6,
				itemCount: 0,
				pageCount: 0,
				currentPage: 0,
				catchScroll: true,
				catchHash: true
			}, options);

			options.itemCount = this.find('li').length;
			options.pageCount = Math.ceil( options.itemCount / options.pageSize );

			$('<div class="pagination pagination-small pagination-centered"><ul class="ulPagination"></ul></div>').appendTo(this.parent());

			var ulPag = this.parent().find('ul.ulPagination');

			for(var x=0;x< options.pageCount;x++)
			{
				var itemHref = ulPag.find('li:eq(' + (x * options.pageSize) + ') a').attr('href');
				$('<li><a href="#">' + ( x+1 ) + '</a></li>').appendTo(ulPag);
			}

			var context = this;

			ulPag.find('li a').on('click',function(e){
				options.currentPage = $(this).parent().index();
				methods.paginate.call( context, options );
				e.preventDefault();
				return false;
			});

            methods.paginate.call( context, options );

			$('.ulpagination li:eq(' + options.currentPage + ')').addClass('active');

			var ourUl = this;

			if( options.catchScroll )
				$(window).on('scroll', $.proxy(function(){
					methods.processScroll.call( this, options )}, this));

			if( options.catchHash )
			{
			$(window).on('hashchange', $.proxy(function(){
					methods.processScroll.call( this, options )}, this));

			
			if (window.location.hash != '')
			{
				$("a[href='" + window.location.hash + "']").parent().addClass('active');
			}


			$(window).ready(function(){
				if (window.location.hash != '')
				{
					methods.processScroll.call( ourUl, options )
				}
			});
			}

			return this;
		},
		paginate : function( options )
		{
			this.parent().find('.ulPagination li').removeClass('active')
						 .filter(':eq(' + options.currentPage + ')').addClass('active');
			var offset = (options.currentPage * options.pageSize);
			this.find('li').hide()
				.slice( offset, offset + options.pageSize ).show();
		},
		processScroll: function( options )
		{
			var currentIndex = this.find('li.active').index();
			if( currentIndex < ( options.currentPage * options.pageSize) || currentIndex >= ( options.currentPage * options.pageSize) + options.pageSize )
			{
				options.currentPage = Math.floor( currentIndex / options.pageSize );
				methods.paginate.call( this, options );
			}
		}
		
	}

	jQuery.fn.ulPaginate = function( method ){

		if ( methods[method] ) {
    		return methods[method].apply( this, Array.prototype.slice.call( arguments, 1 ));
    	} else if ( typeof method === 'object' || ! method ) {
    		return methods.init.apply( this, arguments );
    	} else {
    		$.error( 'Method ' +  method + ' does not exist on jQuery.tooltip' );
    	}

	};

})(jQuery);